name: Secrets

on:
  push:
    branches:
      - main

jobs:
  set-secret:
    runs-on: ubuntu-latest
    steps:
      - name: 1 - Debug github-script (official)
        id: debug1
        uses: actions/github-script@main
        with:
          result-encoding: string
          script: |
            const info = {
              version: github.VERSION,
              github: Object.keys(github || {}),
              githubActions: Object.keys(github.actions || {}),
              githubRest: Object.keys(github.rest || {}),
              githubRestActions: Object.keys(github.rest ? github.rest.actions || {} : {}),
            }
            const result = JSON.stringify(info, undefined, 2)
            console.log(result)
            return result
      - name: 2 - Debug github-script (fork)
        id: debug2
        uses: Simran-B/github-script@main
        with:
          result-encoding: string
          script: |
            const result = JSON.stringify(Object.keys(github.rest.actions), undefined, 2)
            console.log(result)
            return result
      - name: Print debug info
        env:
          debug1: ${{ steps.debug1.outputs.result }}
          debug2: ${{ steps.debug2.outputs.result }}
        run: |
          echo "Debug 1: $debug1"
          echo "Debug 2: $debug2"
      - name: Install tweetsodium
        run: |
          npm install tweetsodium
      - uses: Simran-B/github-script@main
        id: update-secret
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const sodium = require('tweetsodium')
            const envName = "prod"
            const secretName = "MY_SECRET"
            const value = "New secret value"
            //console.log("context")
            //console.log(JSON.stringify(context, undefined, 2))

            let conf = {
              repository_id: context.payload.repository.id,
              environment_name: envName,
            }
            console.log("getEnvironmentPublicKey()")
            console.log(conf)
            const key = await github.rest.actions.getEnvironmentPublicKey(conf)
            console.log(key)
            const messageBytes = Buffer.from(value)
            const keyBytes = Buffer.from(key.key, "base64")
            const encryptedBytes = sodium.seal(messageBytes, keyBytes)
            const encrypted = Buffer.from(encryptedBytes).toString("base64")

            conf = {
              repository_id: context.payload.repository.id,
              environment_name, envName,
              secret_name: secretName,
              encrypted_value: encrypted,
            }
            console.log("createOrUpdateEnvironmentSecret()")
            console.log(conf)
            const result = await github.rest.actions.createOrUpdateEnvironmentSecret(conf)
            console.log(result)
  use-secret:
    runs-on: ubuntu-latest
    needs: set-secret
    environment: prod
    steps:
      - name: Use secret
        run: |
          echo "secrets.MY_SECRET (${{ secrets.MY_SECRET }}) == 'New secret value' ? ${{ secrets.MY_SECRET == 'New secret value' }}"
